.. _c2c-limitations:

===========
Limitations
===========


.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: twocols

.. warning::

   ``mongosync`` does not check for compliance with the documented
   limitations. Please ensure that your application is not affected by
   the limitations. Running ``mongosync`` in the presence of one of
   these limitations could lead to undefined behavior on the destination
   cluster.

General Limitations
-------------------

.. note::

  For information on MongoDB server compatility, see
  :ref:`c2c-server-version-compatibility`.

- The destination cluster must be empty.
- ``mongosync`` doesn't validate that the clusters or the environment
  are properly configured.
- Other clients must not write to the destination cluster while
  ``mongosync`` is running.
- If write blocking is disabled, the client must :ref:`prevent writes
  <c2c-api-start>` to the source cluster before starting the commit
  process.
- :dbcommand:`applyOps` operations from the source cluster aren't
  supported.
- :ref:`system.* collections <metadata-system-collections>` aren't
  replicated.
- Documents that have dollar (``$``) prefixed field names aren't
  supported. See :ref:`Field Names with Periods and Dollar Signs
  <crud-concepts-dot-dollar-considerations>`.
- Serverless clusters aren't supported.
- A MongoDB Shared Tier isn't supported.
- `Queryable Encryption
  <https://www.mongodb.com/docs/v6.0/core/queryable-encryption/>`__
  isn't supported.
- You cannot sync a collection that has a unique index and a non-unique
  index defined on the same field(s).
- .. include:: /includes/fact-atlas-require-indexes-limitation.rst
- ``mongosync`` doesn't sync users or roles.

MongoDB Community Edition
-------------------------

MongoDB does not test {+c2c-product-name+} with Community builds and in
most cases, MongoDB does not offer support for {+c2c-product-name+} with
Community deployments. If you would like to use {+c2c-product-name+}
with MongoDB Community Edition, contact a MongoDB sales representative
to discuss requirements and individualized options.

Unsupported Collection Types
----------------------------

- Time-series collections aren't supported.
- Clustered collections with :ref:`expireAfterSeconds
  <db.createCollection.expireAfterSeconds>` set aren't supported.

Sharded Clusters
----------------

- ``mongosync`` doesn't support sync from a sharded cluster
  to a replica set.
- Sync from a replica set to a sharded cluster has the following
  limitations:

  - ``mongosync`` allows users to rename collections that the
    ``sharding.shardingEntries`` option for the :ref:`c2c-api-start`
    command includes during sync. To see limitations on renaming
    collections while ``mongosync`` is running, see :ref:`Renaming
    During Sync <rename-during-sync>`.
  - When using the ``sharding.createSupportingIndexes`` option to create
    indexes supporting shard keys on the destination cluster during
    sync, you cannot create these indexes afterwards on the source
    cluster.

    The index must either exist before ``mongosync`` starts or be
    created after the migration is complete and ``mongosync`` has
    stopped.

- Within a collection, the ``_id`` field must be unique across all of
  the shards in the cluster. See :ref:`sharded-clusters-unique-indexes`
  for more details.
- The :dbcommand:`movePrimary` command cannot be used to reassign the
  primary shard while syncing.
- There is no replication for zone configuration. ``mongosync``
  replicates data, it doesn't inherit zones.
- Shards cannot be added or removed while syncing.
- ``mongosync`` only syncs indexes that exist on all shards.
- ``mongosync`` only syncs indexes that have consistent index
  specifications on all shards.

.. note::

  To check for index inconsistencies, see :ref:`Find Inconsistent
  Indexes Across Shards <manage-indexes-find-inconsistent-indexes>`.

- The shard key cannot be :ref:`refined <shard-key-refine>` while
  syncing.
- The shard key cannot be modified using :dbcommand:`reshardCollection`
  during syncing.
- The maximum number of indexes per sharded collection is 63, which is
  one less than the :ref:`default limit
  <limit-number-of-indexes-per-collection>` of 64.
- ``mongosync`` only supports syncing sharded collections that have
  default :ref:`collation <collation>` settings.

Reversing
---------

- If the old source has :ref:`unique indexes <index-type-unique>` which
  are partially distributed across shards, reversing may cause failures.
  Ensure that unique indexes exist on all shards before reversing.
- .. include:: /includes/fact-reverse-limitation.rst

Multiple Clusters
-----------------

- Syncing multiple source clusters to one destination cluster isn't
  supported.
- Syncing one source cluster to many destination clusters isn't
  supported.

.. _c2c-filtering-limitations:

Filtered Sync
-------------

.. include:: /includes/limitations-filtering.rst

Capped Collections
------------------

.. include:: /includes/collections/behavior-capped-collections.rst

System Collections
------------------

.. include:: /includes/collections/behavior-system-collections.rst
